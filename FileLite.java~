/**
 *Clase Ejemplo crud para manejo de archivos "Ficheros de Texto" 
 * @author Lester Barahona Aguirre
 * @version 1.0
 */

import java.io.*;
public class FileLite{

  private FileReader fReader; 
  private BufferedReader bReader;
  
  private FileWriter fWriter;
  private BufferedWriter bWriter;
  private PrintWriter writer;
  
  private String path="./files/file.txt"; 
  private String separator="-";
 
//considerar usar un state global
  public FileLite(){}
  
  public FileLite(String path){
      setPath(path);
  }

  public FileLite(String path,String separator){
  setPath(path);
  setSeparator(separator);
  }
  

  public void startReader(){
    try{
      fReader =new FileReader(path);
      bReader=new BufferedReader(fReader);
    }catch(IOException e){
      System.err.println("Error to start the Reader: "+e.getMessage());
    }
  }
  
  public void startWriter(boolean append){
     try{
      fWriter =new FileWriter(path,append);
      bWriter=new BufferedWriter(fWriter);
      writer=new PrintWriter(bWriter);
    }catch(IOException e){
      System.err.println("Error to Start the Writer: "+e.getMessage());
    }
  }

//------------------------------------------------------------------------------------------------WRITE
  public void writeLine(String text,boolean append){
    try{
      startWriter(append);
      writer.println(text);
      writer.flush();
      bWriter.close();
    }catch(IOException e){
      System.err.println("Error to write in the file: "+e.getMessage());
    }
  }
  
   public void writeLines(String[] lines,boolean append){
    try{
      startWriter(append);
      for(String line:lines){
        writer.println(line);
      }
      writer.flush();
      bWriter.close();
    }catch(IOException e){
      System.err.println("Error to write in the file: "+e.getMessage());
    }
  }
   
   public void writeArrayLine(String[] arrayLine,boolean append){
    try{
      startWriter(append);
      writer.println(String.join(getSeparator(), arrayLine));
      writer.flush();
      bWriter.close();
    }catch(IOException e){
      System.err.println("Error to write in the file: "+e.getMessage());
    }
  } 
  
    public void writeArrayLines(String[][] arrayLines,boolean append){
    try{
      startWriter(append);
      for(String[] arrayLine:arrayLines){
        writer.println(String.join(getSeparator(), arrayLine));
      }
      writer.flush();
      bWriter.close();
    }catch(IOException e){
      System.err.println("Error to write in the file: "+e.getMessage());
    }
  }
  
  //-------------------------------------------------------------------------------------------READ

  public String readFile(){
    String tmp="";
    String output="";
    try{
      startReader();
      while((tmp=bReader.readLine())!=null){
        output+=tmp+"\n";   
      }
      bReader.close();
    }catch(IOException e){
      System.err.println("Error to Read  the file: "+e.getMessage());
    }
    return output;
  }
    
  public String[] readLines(){
    return readFile().split("\n");  
  }
  
  public String readLine(int line){
    return readLines()[line];
  }
  
  public String[] readArrayLine(int line){
    return readLine(line).split(getSeparator());
  }
  
  public String[][] readArrayLines(){
    String [] lines=readLines();
    String[][] arrayLines=new String[lines.length][];
    for(int i=0;i<arrayLines.length;i++){
      arrayLines[i]=lines[i].split(getSeparator());
    }
    return arrayLines;
  }
  
  public String readLastLine(){
    String[] lines=readLines(); 
    return lines[lines.length-1];
  }
  
   public String[] readLastArrayLine(){
    return readLastLine().split(getSeparator());
  }
 //------------------------------------------------------------------------FindMethods
   
   
//-------------------------------------------------------------------------setters and getters

  public void setPath(String path){
    this.path=path;
  }
  
  public String getPath(){
    return this.path;
  }

  public void setSeparator(String separator){
  this.separator=separator;
  }
  
  public String getSeparator(){
    return this.separator;
  }

}